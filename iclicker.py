
#!/usr/bin/env python3

import socket
import sys
import os
from PIL import Image
import time
import binascii
from multiprocessing import Process, Queue

host = '0.0.0.0'
port = 8080
addr = (host, port)

report_0112aa00 = b'\x01\x12\xaa\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
report_0132aa00 = b'\x01\x32\xaa\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
report_011eaa00 = b'\x01\x1e\xaa\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
report_01150057 = b'\x01\x15\x00\x57\x05\x04\x21\x43\x01\x00\x66\x00\x07\x00\x04\x12\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
report_01220000 = b'\x01\x22\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
report_0110aa00 = b'\x01\x10\xaa\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
report_0111aa00 = b'\x01\x11\xaa\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
report_0119aa00 = b'\x01\x19\xaa\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
report_0116aa00 = b'\x01\x16\xaa\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
report_01220000 = b'\x01\x22\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
report_0129aa00 = b'\x01\x29\xaa\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
report_012aaa00 = b'\x01\x2a\xaa\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
report_022c0000 = b'\x02\x2c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'

cmd_start_session = b'\x01\x15\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
cmd_start_poll = b'\x01\x19\x66\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
cmd_end_poll = b'\x01\x12\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'

report_open_display = b'\xaa\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
report_close_display = b'\xbb\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
report_reset_display = b'\xcc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'

global inputStr
inputStr = ""

def hid_main():
        start_up()
        print("--- Started ---")
        while True:
                out = read()
                if out[:63] == cmd_start_session:
                        start_session()
                        print("--- Started Session ---")
                elif out[:63] == cmd_start_poll:
                        start_poll()
                        print("--- Started Poll ---")
                elif out[:63] == cmd_end_poll:
                        end_poll()
                        print("--- Ended Poll ---")

def start_up():
        read()
        write_report(report_0112aa00)
        read()
        write_report(report_0132aa00)
        read()
        write_report(report_011eaa00)
        read()
        write_report(report_01150057)
        read()
        write_report(report_01220000)
        read()
        write_report(report_0110aa00)
        read()
        write_report(report_011eaa00)
        read()
        write_report(report_0116aa00)
        read()
        read()

def start_session():
        write_report(report_01150057)
        read()
        write_report(report_0112aa00)
        read()
        write_report(report_011eaa00)
        read()
        write_report(report_01150057)
        read()
        write_report(report_01220000)
        read()
        write_report(report_0110aa00)
        read()
        write_report(report_011eaa00)
        read()
        write_report(report_0116aa00)
        read()
        write_report(report_0129aa00)
        read()
        write_report(report_01150057)
        read()
        write_report(report_0112aa00)
        read()
        write_report(report_011eaa00)
        read()
        write_report(report_012aaa00)
        write_report(report_022c0000)
        read()
        write_report(report_01150057)
        read()
        write_report(report_01220000)
        read()
        write_report(report_0110aa00)
        read()
        write_report(report_011eaa00)
        read()
        write_report(report_0116aa00)

def start_poll():
        write_report(report_0119aa00)
        read()
        write_report(report_0111aa00)


def student_response(id, number, letter):
        """This method is the one used to log student responses.

        @param: id A hex-string of length sixth used to represent students.
        @param: number The number of times this student has already responded
                (starting at 0)
        @param: letter The letter that the student has chosen as their response.

        """

        global count
        response = 128
        if letter == 'a':
                response += 1
        elif letter == 'b':
                response += 2
        elif letter == 'c':
                response += 3
        elif letter == 'd':
                response += 4
        elif letter == 'e':
                response += 5

        write_report(b'\x02\x30' + chr(number) + b'\x05' + chr(response) + bytearray.fromhex(id) + chr(count) + b'\x00' * 55)
        count += 1

def end_poll():
        write_report(report_0112aa00)
        read()
        write_report(report_0119aa00)
        read()
        write_report(report_0116aa00)
        read()
        read()

def open_display():
        write_report(report_open_display)

def close_display():
        write_report(report_close_display)

def reset_display():
        write_report(report_reset_display)

def course_switched():
        write_report(report_0116aa00)
        write_report(report_0116aa00)
        write_report(report_0116aa00)
        write_report(report_0116aa00)
        write_report(report_0116aa00)
        write_report(report_0116aa00)
        write_report(report_0116aa00)
        write_report(report_0116aa00)


def read():
        with open('/dev/hidg0', 'rb+') as fd:
                output = fd.read(64)
                print(binascii.hexlify(output))
                return output

def write_report(report):
        with open('/dev/hidg0', 'rb+') as fd:
                fd.write(report)

if __name__ == "__main__":
        with open('./Pathway', 'r+') as o:
                pathway = o.readline()
                print(pathway)
                if pathway == "GEther\n":
                        server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                        server.bind(addr)
                        server.listen(5)
                        conn, client_addr = server.accept()

                        if os.path.isfile("computer_ip"):
                                os.remove("computer_ip")

                        with open("computer_ip", "w+") as w:
                                w.write(client_addr[0])
                                w.close()
                        server.close()
                elif pathway == "HID\n":
                        hid_main()


